start <- Sys.time()
setwd("~/Desktop/HomeStars/Financial Analytics and Strategy/Churn Reports/Quarterly Churn Reports")
  
  ############################################################################################
  ####PACKAGES####
  ############################################################################################
  library(RForcecom)
  library(httr) 
  library(jsonlite)
  library(dplyr)
  library(readr)
  library(stringr)
  library(lubridate)
  library(sqldf)
  library(rdrop2)
  library(dotenv)
  library(googlesheets)
  options(sqldf.driver="SQLite")
  as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
  
  ############################################################################################
  #### FINANCIAL DATA ####
  ############################################################################################
    
  #### QUERY ####
  body = paste('{
               "Format": "csv",
               "Name": "test",
               "Query":"select
  Account.HomestarsExternalID__c,
  Account.LastInvoiceDate,
  Account.Name,
  Account.SalesRepName,
  Account.Mrr,
  Subscription.CancelledDate,
  Subscription.TermStartDate
               from Subscription
               Where Account.Batch != \'Batch5\'  and Subscription.Status = \'Cancelled\' and
               Subscription.Name != \'Lead Purchase\' and
               Subscription.Name != \'Network Access Fee\'and
               Subscription.Name != \'AR Recovery\' and Account.Mrr = 0 and
               Account.LastInvoiceDate != null",
               "Status": "Processing",
               "Zip": false
               }')
  
  #### MAKE REQUEST ####
  getdata <- POST("https://rest.zuora.com/v1/object/export", auth, body = body)
  r <- fromJSON(content(getdata, type = "text"))
  
  #### CHECK STATUS ####
  r$Status = 'check'
  while(r$Status != 'Completed') {
    Sys.sleep(30)
    getdata <- GET(paste("https://rest.zuora.com/v1/object/export/",r$Id, sep = ''), auth)
    r <- fromJSON(content(getdata, type = "text"))
    print(r$Status)
  }
  
  getdata <- GET(paste("https://rest.zuora.com/v1/files/",r$FileId, sep = ''), auth)
  data <- content(getdata, type = "text/csv")
  rm(r,getdata,auth,body)
  
  ############################################################################################
  ####CURRENT YEAR NUMBERS####
  ############################################################################################
  
  churned_accounts <- data[year(data$Subscription.CancelledDate) == year(Sys.Date()),]
  colnames(churned_accounts) <- c('company_id','last_invoice','account_name','sales_rep','mrr','cancelled_date','subscription_start')
  churned_accounts <- churned_accounts %>% filter(churned_accounts$subscription_start < churned_accounts$cancelled_date)
  ############################################################################################
  
  
  ############################################################################################
  ####TENURE####
  ############################################################################################
  churned_accounts$days_tenure <- as.numeric(churned_accounts$cancelled_date - churned_accounts$subscription_start)
  
  churned_accounts$months_tenure <- 12 * (year(churned_accounts$cancelled_date) - year(churned_accounts$subscription_start)) +
    (month(churned_accounts$cancelled_date) - month(churned_accounts$subscription_start)) 
  

  ####TO CHECK FOR DIFFERENT PERIODS####
  #churned_accounts <- data[data$Subscription.CancelledDate >= ('2019-04-01') & data$Subscription.CancelledDate < '2019-04-30',]

  
  ############################################################################################
  ####DATABASE CONNECTION####
  ############################################################################################
if (exists("connection.sql") == FALSE) {
  connection.sql <-dbConnect(RMySQL::MySQL(),
                             dbname = dbName,
                             host = dbHost,
                             port = dbPort,
                             user = dbUser,
                             password = dbPassword)
  } else {
    print('The connection is already established!')
  }
  

  ############################################################################################
  ####REVIEWS####
  ############################################################################################
  Reviews <- unique.data.frame(dbGetQuery(connection.sql, 'SELECT r.company_id, r.created_at,r.updated_at,r.service_area_id ,r.id AS review_id, cat.name as category_name
  FROM reviews r
                          INNER JOIN category_tags ct
                          ON r.id = ct.category_taggable_id
                          INNER JOIN categories cat
                          ON cat.id = ct.category_id
                          WHERE state = "approved"
                          AND money_changed = 1
                          AND ct.category_taggable_type = "Review"')) 

  
  
  total_count_reviews <- sqldf("SELECT company_id, COUNT(company_id) as reviews_total_count
                           FROM Reviews
                           GROUP BY company_id;")
  
  reviews <- left_join(Reviews, total_count_reviews, by = 'company_id')
  
  churned_accounts <- left_join(churned_accounts, total_count_reviews, by = 'company_id')
  churned_accounts$reviews_total_count <- ifelse(is.na(churned_accounts$reviews_total_count), 0, churned_accounts$reviews_total_count)
  
  
  churned_accounts_w_reviews <- left_join(churned_accounts,reviews, by = 'company_id')
  churned_accounts_w_reviews$period <- churned_accounts_w_reviews$cancelled_date - days(60)
  
  churned_accounts_w_reviews<- churned_accounts_w_reviews[churned_accounts_w_reviews$created_at >= churned_accounts_w_reviews$period &
                                                            churned_accounts_w_reviews$created_at < churned_accounts_w_reviews$cancelled_date, ]
  
  
  test <- sqldf("SELECT company_id, COUNT(company_id) AS reviews_within_60 
                FROM churned_accounts_w_reviews
                GROUP BY company_id;")
  
  churned_accounts <- left_join(churned_accounts, test, by = 'company_id')
  
  churned_accounts$reviews_within_60  <- ifelse(is.na(churned_accounts$reviews_within_60), 
                                0, churned_accounts$reviews_within_60)
  
  suppressWarnings(rm(reviews,test,churned_accounts_w_reviews, Reviews,total_count_reviews))
  
  ############################################################################################
  ####PROFILE CONNECTIONS####
  ############################################################################################
  profile_connections <- unique.data.frame(dbGetQuery(connection.sql,
                                    'SELECT j.company_id,
                                    j.service_area_id, j.direct,
                                    j.created_at, j.updated_at, j.state
                                    from job_requests j
                                    WHERE direct = 1'))
  
  total_con_profile <- sqldf("SELECT company_id, COUNT(company_id) as profile_total_count
                           FROM profile_connections
                           GROUP BY company_id;")
  
  churned_accounts <- left_join(churned_accounts, total_con_profile, by = 'company_id')
  churned_accounts$profile_total_count  <- ifelse(is.na(churned_accounts$profile_total_count),0,churned_accounts$profile_total_count)
  
  churned_accounts_w_profile <- left_join(churned_accounts,profile_connections , by = 'company_id')
  churned_accounts_w_profile$period <- churned_accounts_w_profile$cancelled_date - days(60)
  
  
  
  
  churned_accounts_w_profile<- churned_accounts_w_profile[churned_accounts_w_profile$created_at >= churned_accounts_w_profile$period &
                                                            churned_accounts_w_profile$created_at < churned_accounts_w_profile$cancelled_date, ]
  
  
  test <- sqldf("SELECT company_id, COUNT(company_id) AS profile_within_60 
                FROM churned_accounts_w_profile
                GROUP BY company_id;")
  
  churned_accounts <- left_join(churned_accounts, test, by = 'company_id')
  
  churned_accounts$profile_within_60  <- ifelse(is.na(churned_accounts$profile_within_60), 
                                0, churned_accounts$profile_within_60)
  
  suppressWarnings(rm(reviews,test,churned_accounts_w_reviews, Reviews,total_count_reviews,profile_connections, total_con_profile, churned_accounts_w_profile))
  
  
  
  ############################################################################################
  ####HOMESTARS CONNECTIONS####
  ############################################################################################
  
  HS_connections <- unique.data.frame(dbGetQuery(connection.sql,
                               'SELECT j.company_id,
                                    j.service_area_id, j.direct,
                                    j.created_at, j.updated_at, j.state
                                    from job_requests j
                                    WHERE direct = 0'))
  
  total_con_HS <- sqldf("SELECT company_id, COUNT(company_id) as hs_total_count
                           FROM HS_connections
                           GROUP BY company_id;")
  
  churned_accounts <- left_join(churned_accounts, total_con_HS, by = 'company_id')
  churned_accounts$hs_total_count  <- ifelse(is.na(churned_accounts$hs_total_count),0,churned_accounts$hs_total_count)
  
  churned_accounts_w_hs <- left_join(churned_accounts,HS_connections , by = 'company_id')
  churned_accounts_w_hs$period <- churned_accounts_w_hs$cancelled_date - days(60)
  
  
  churned_accounts_w_hs<- churned_accounts_w_hs[churned_accounts_w_hs$created_at >= churned_accounts_w_hs$period &
                                                  churned_accounts_w_hs$created_at < churned_accounts_w_hs$cancelled_date, ]
  
  
  
  test <- sqldf("SELECT company_id, COUNT(company_id) AS hs_within_60
                FROM churned_accounts_w_hs
                GROUP BY company_id;")
  
  churned_accounts <- left_join(churned_accounts, test, by = 'company_id')
  
  churned_accounts$hs_within_60  <- ifelse(is.na(churned_accounts$hs_within_60), 
                                0, churned_accounts$hs_within_60)
  
  suppressWarnings(rm(reviews,test,churned_accounts_w_reviews, Reviews,total_count_reviews,profile_connections, total_con_profile, churned_accounts_w_profile,total_con_HS,HS_connections, 
                      churned_accounts_w_hs))
  
  ############################################################################################
  ####PHONE CONNECTIONS####
  ############################################################################################
  
  phone_connections <- unique.data.frame(dbGetQuery(connection.sql,
                                  'SELECT event_action,
                                  company_id, created_at,
                                  updated_at
                                  FROM contact_impressions
                                  WHERE event_action = "phone"
                                  AND company_id != 0
                                  AND company_id != 2
                                  AND company_id != 1'))
  
  total_con_phone <- sqldf("SELECT company_id, COUNT(company_id) as phone_total_count
                           FROM phone_connections
                           GROUP BY company_id;")
  
  
churned_accounts <- left_join(churned_accounts, total_con_phone, by = 'company_id')
  
churned_accounts$phone_total_count  <- ifelse(is.na(churned_accounts$phone_total_count),0,churned_accounts$phone_total_count)
  
churned_accounts_w_phone <- left_join(churned_accounts,phone_connections , by = 'company_id')
churned_accounts_w_phone$period <- churned_accounts_w_phone$cancelled_date - days(60)
  
  
churned_accounts_w_phone<- churned_accounts_w_phone[churned_accounts_w_phone$created_at >= churned_accounts_w_phone$period &
                                                        churned_accounts_w_phone$created_at < churned_accounts_w_phone$cancelled_date, ]
  
  
  
  
test <- sqldf("SELECT company_id, COUNT(company_id) AS phone_within_60 
                FROM churned_accounts_w_phone
                GROUP BY company_id;")
  
  churned_accounts <- left_join(churned_accounts, test, by = 'company_id')
  
  churned_accounts$phone_within_60  <- ifelse(is.na(churned_accounts$phone_within_60), 
                                0, churned_accounts$phone_within_60)
  
  suppressWarnings(rm(reviews,test,churned_accounts_w_reviews, Reviews,total_count_reviews,profile_connections, total_con_profile, churned_accounts_w_profile,total_con_HS,HS_connections, churned_accounts_w_phone,
     phone_connections,total_con_phone,churned_accounts_w_hs))
  

############################################################################################
####CATEGORIES, STARSCORES, SERVICE AREAS####
############################################################################################
  
test <- dbGetQuery(connection.sql,"SELECT c.name as category_name, o.company_id, r.star_score, e.name as city_name
                   FROM categories c
                   LEFT JOIN company_categories o  ON c.id = o.category_id
                   LEFT JOIN recommendation_meter_stat_v2s r ON o.company_id = r.company_id
                   LEFT JOIN service_areas s ON r.company_id = s.company_id
                   LEFT JOIN cities e on s.city_id = e.id;")

churned_accounts <- left_join(churned_accounts, test, by = "company_id")
churned_accounts <- sqldf('SELECT * from churned_accounts
                          GROUP BY company_id;')

####FINAL FILTER####
churned_accounts <- churned_accounts[churned_accounts$days_tenure != 0 & (churned_accounts$subscription_start != churned_accounts$cancelled_date) &
                                       !is.null(churned_accounts$last_invoice) &
                                     !is.na(churned_accounts$company_id),]


suppressWarnings(rm(reviews,test,churned_accounts_w_reviews, Reviews,total_count_reviews,profile_connections, total_con_profile, churned_accounts_w_profile,total_con_HS,HS_connections, churned_accounts_w_phone,
   phone_connections,total_con_phone,churned_accounts_w_hs))

############################################################################################
setwd("~/Desktop/HomeStars/Financial Analytics and Strategy/Churn Reports/Quarterly Churn Reports")
write.csv(churned_accounts,'Churn_Report.csv')

############################################################################################
####ADD THE FILE TO THE DROPBOX @Churn_Reports####
token <- drop_auth()
saveRDS(token, file = "token.rds")
drop_auth(rdstoken = "token.rds")
drop_upload("Churn_Report.csv", 'Analytics/Churn_Reports', dtoken = token)
############################################################################################

####COMMENT####
#### THIS IS NECESSARY TO CONNECT THE FILE TO TABLEAU #### 
gs_upload("Churn_Report.csv", sheet_title = "churn_report", verbose = FALSE, overwrite = TRUE)
############################################################################################

############################################################################################
end <- Sys.time()
process <- (end - start)
paste("To complete the code it took", round(process * 60, digits = 0), "seconds")
############################################################################################

